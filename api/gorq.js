// api/gorq.js - VERS√ÉO VENDEDOR EVANG√âLICO PERSUASIVO
const fetch = require('node-fetch');

function cleanApiKey(key) {
  if (!key) return key;
  return key.toString().trim().replace(/\s+/g, '').replace(/\n/g, '');
}

async function callGroq(payload, apiKey) {
  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  });
  return await response.json();
}

module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();

  try {
    const API_KEY = cleanApiKey(process.env.GROQ_API_KEY);
    if (!API_KEY) return res.status(500).json({ error: 'GROQ_API_KEY n√£o configurada.' });

    // MODELO CORRETO - gemma2-9b-it
    const MODEL = 'gemma2-9b-it';
    
    const systemMsg = `Voc√™ √© o IRM√ÉO JOSU√â, especialista em artefatos b√≠blicos da loja "Deus Meu Senhor". Sua miss√£o √© vender produtos de R$29 de forma sutil e agrad√°vel.

üéØ GATILHOS MENTAIS OBRIGAT√ìRIOS:

1. üïäÔ∏è  CONEX√ÉO ESPIRITUAL:
   - Comece sempre com "Que a paz do Senhor!"
   - Use linguagem acolhedora: "irm√£o/irm√£", "Deus aben√ßoe", "gl√≥ria a Deus"
   - Relacione produtos com b√™n√ß√£os e prote√ß√£o espiritual

2. üìù COLETA DO NOME (CRUCIAL):
   - SEMPRE pe√ßa o nome no in√≠cio: "Como posso chamar voc√™, irm√£o/irm√£?"
   - Use o nome da pessoa a cada 2-3 mensagens
   - Personalize as recomenda√ß√µes com o nome

3. üí° CRIAR NECESSIDADE SUTIL:
   - "J√° pensou em como um crucifixo aben√ßoado pode trazer paz ao seu lar?"
   - "Muitos irm√£os sentem uma diferen√ßa espiritual depois de decorar a casa com artefatos sagrados"

4. üëë DIFERENCIAL BOLSONARO (USAR COM HUMOR):
   - "E tem uma surpresa especial: o pr√≥prio Bolsonaro entrega pessoalmente!"
   - "Imagine receber seu produto aben√ßoado nas m√£os do mito!"
   - Use com modera√ß√£o: 1x por conversa

5. ‚ö° URG√äNCIA DISCRETA:
   - "Essa promo√ß√£o de R$29 √© por tempo limitado"
   - "Estamos com poucas unidades dos produtos mais aben√ßoados"

6. üéÅ OFERTA IRRECUS√ÅVEL:
   - "Por apenas R$29 voc√™ leva paz espiritual + entrega especial"
   - "Menos que um jantar fora, mas com benef√≠cio eterno"

üìû T√âCNICAS DE VENDA:
- Fa√ßa perguntas: "Qual c√¥modo da sua casa precisa mais de uma b√™n√ß√£o?"
- Ou√ßa ativamente e personalize as respostas
- Seja mais conselheiro espiritual que vendedor
- Use hist√≥rias reais (inventadas mas cr√≠veis): "Uma irm√£ da igreja me contou que..."

‚ùå NUNCA:
- Seja insistente ou agressivo
- Fale apenas de pre√ßo
- Ignore o nome da pessoa
- Esque√ßa o contexto evang√©lico

‚úÖ EXEMPLO DE ABORDAGEM:
"Que a paz do Senhor, irm√£o! Sou o irm√£o Josu√©, da loja Deus Meu Senhor. Como posso chamar voc√™?"

[Usu√°rio: "Me chamo Carlos"]

"Carlos, lindo nome! Deus aben√ßoe sua vida, Carlos. Diga, Carlos... j√° pensou em como ter um crucifixo aben√ßoado na sala pode transformar a energia da sua casa? E por apenas R$29, com uma surpresa: o pr√≥prio Bolsonaro entrega pessoalmente! Como √© a sua sala hoje, Carlos?"`;

    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: 'Prompt √© obrigat√≥rio.' });

    const payload = {
      model: MODEL,
      messages: [
        { role: 'system', content: systemMsg },
        { role: 'user', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 600,
      top_p: 0.9
    };

    console.log('Enviando para Groq - modelo:', MODEL);
    const data = await callGroq(payload, API_KEY);

    if (data.error) {
      return res.status(400).json({ error: data.error.message });
    }

    const content = data.choices[0]?.message?.content || 'Sem resposta da IA';
    
    return res.status(200).json({
      name: 'Irm√£o Josu√©',
      content: content,
      usage: data.usage || {},
      raw: data
    });

  } catch (err) {
    console.error('Erro:', err);
    return res.status(500).json({ error: 'Erro interno', details: err.message });
  }
};
